// This file contains the Prisma schema for both DMC and ETF tracker databases
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

// Enums for better type safety
// Network/Contract Type Model for dynamic contract types
model NetworkType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique  // e.g., "ERC20", "BEP20", etc.
  network     String    // e.g., "Ethereum", "BSC", etc.
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  addresses   TokenNetworkAddress[]

  @@index([network])
  @@index([isActive])
}

// Junction Model for Token-Network relationship
model TokenNetworkAddress {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  token         Token       @relation(fields: [tokenId], references: [id])
  tokenId       String      @db.ObjectId
  networkType   NetworkType @relation(fields: [networkTypeId], references: [id])
  networkTypeId String      @db.ObjectId
  address       String
  addedAt       DateTime    @default(now())
  isActive      Boolean     @default(true)

  @@unique([tokenId, networkTypeId, address])
  @@index([networkTypeId])
  @@index([tokenId])
  @@index([address])
}

enum ETFType {
  SPOT
  FUTURES
}

enum ETFStatus {
  LIVE
  STOPPED
}

// Dynamic Category Model
model Category {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  slug          String         @unique  // URL-friendly version of name
  description   String?
  isActive      Boolean        @default(true)
  displayOrder  Int?           // For custom ordering in UI
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tokens        TokenToCategory[]

  @@index([isActive, displayOrder])
}

// Junction Model for Token-Category relationship
model TokenToCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  token       Token     @relation(fields: [tokenId], references: [id])
  tokenId     String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  addedAt     DateTime  @default(now())

  @@unique([tokenId, categoryId])
  @@index([categoryId])
  @@index([tokenId])
}

// DMC Models
model Token {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  ticker           String           @unique
  name             String
  rank             Int?
  currentPrice     CurrentPrice
  marketData       MarketData
  networkAddresses TokenNetworkAddress[]
  categories       TokenToCategory[] // Changed to reference junction model
  socials          Socials
  description      String?
  tradingMarkets   TradingMarket[]
  graphUrls        GraphUrls
  cmcId            String?
  cmcSlug          String?
  priceChanges     PriceChanges
  etfRecords       ETFRecord[]
  history          TokenHistory[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([rank])
  @@index([ticker, name])
  @@index([marketData])
}

// Rest of the types remain the same
type CurrentPrice {
  usd         Float
  lastUpdated DateTime
}

type MarketData {
  marketCap         Float?
  fdv               Float?
  volume24h         Float?
  totalSupply       Float?
  circulatingSupply Float?
  maxSupply         Float?
}

type Socials {
  website       String[]   @default([])
  twitter       String[]   @default([])
  telegram      String[]   @default([])
  discord       String[]   @default([])
  github        String[]   @default([])
  explorer      String[]   @default([])
  facebook      String[]   @default([])
  announcement  String[]   @default([])
  chat          String[]   @default([])
}

type TradingMarket {
  exchange   String
  pair       String
  volume24h  Float
}

type GraphUrls {
  price      String?
  marketCap  String?
}

type PriceChanges {
  hour1       Float?
  day1        Float?
  month1      Float?
  year1       Float?
  lastUpdated DateTime
}

type ETFRecord {
  etfId            String  @db.ObjectId
  relationshipType String
}

// Rest of the models remain the same...
model TokenHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     Token    @relation(fields: [tokenId], references: [id])
  tokenId   String   @db.ObjectId
  timestamp DateTime
  price     Float
  marketCap Float?
  volume    Float?

  @@index([tokenId, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
}

// ETF Tracker Models remain the same...